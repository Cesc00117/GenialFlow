summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
fit <- as.data.frame(cbind(fit[1:(nrow(fit)-1),3], fit[2:nrow(fit),8],
stringAsFactor = F))
colnames(fit) <- c('state', 'idx')
}
print(fit)
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
fit <- as.data.frame(cbind(fit$state[1:(nrow(fit)-1)], fit[2:nrow(fit),8],
stringAsFactor = F))
colnames(fit) <- c('state', 'idx')
}
print(fit)
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
gT1k0
gT1k0$state
cbind(gT1k0$state, idx)
cbind(gT1k0$state, idx_house)
cbind(gT1k0$state, idx_house[1:86])
cbind(gT1k0$state, idx_house$V1[1:86])
cbind(gT1k0$state, idx_house$V1[1:86], stringAsFactor=T)
cbind(gT1k0$state, idx_house$V1[1:86], stringAsFactor=F)
cbind(gT1k0$state, idx_house$V1[1:86], stringAsFactor=F)
? cdbing
? cbind
cbind(gT1k0$state, idx_house$V1[1:86], stringsAsFactors=F)
cbind(gT1k0$state, idx_house$V1[1:86])
cbind(as.character(gT1k0$state), idx_house$V1[1:86])
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
fit <- as.data.frame(cbind(as.character(fit$state[1:(nrow(fit)-1)]), fit[2:nrow(fit),8],
stringAsFactor = F))
colnames(fit) <- c('state', 'idx')
}
print(fit)
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
fit <- as.data.frame(cbind(as.character(fit$state[1:(nrow(fit)-1)]), fit[2:nrow(fit),8]))
colnames(fit) <- c('state', 'idx')
}
print(fit)
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
fit <- as.data.frame(cbind(as.character(fit$state[1:(nrow(fit)-1)]), fit[2:nrow(fit),8]))
colnames(fit) <- c('state', 'idx')
}
print(fit)
m1 <- lm(idx~as.factor(state), data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
cycleRobust <- function(dfCycle, y, dif = TRUE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
m1 <- lm(idx[2:nrow(fit)]~state[1:(nrow(fit)-1)], data = fit)
}
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
#setwd('E:\\workspace_qdf/R/industryData')
ins2cyc <- function(csv_file, eco_cycle){
CSVFILE <- read.csv(csv_file, header = T,
stringsAsFactors = F)
idx <- idxMedian(df = CSVFILE,
time_start = "1993/3/1",
time_end = "2017/12/1")
cycleRobust(dfCycle = eco_cycle,
y = idx)
}
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '传媒净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '电气设备净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '电子净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '房地产净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '纺织服装净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '非银金融净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
cycleRobust <- function(dfCycle, y, dif = FALSE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
m1 <- lm(idx[2:nrow(fit)]~state[1:(nrow(fit)-1)], data = fit)
}
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
########################################
# idxMedian函数
# 功能：获取行业指标（中位数）
# 输入：行业数据框（行：所有企业 列：开始时间-结束时间 元素：指标的值）
# 输出：行名称为时间点，一列元素为指标中位数的dataframe
########################################
idxMedian <- function(df, time_start, time_end){
num <- df[,3:ncol(df)]
m <- as.matrix(num)
m[which(m==0)] <- NA
num <- as.data.frame(m)
for(i in 1:ncol(num)) num[,i] <- as.numeric(num[,i])
# 提取指标
idx <- c()
for(i in 1:ncol(num)){
mid <- median(num[,i], na.rm = T)
idx <- c(idx, mid)
}
idx <- as.numeric(idx)
rlt <- as.data.frame(idx,
row.names =
as.character(
seq.Date(
from = as.Date(time_start),
to = as.Date(time_end),
by = 'quarter')))
return(rlt)
}
cycleRobust <- function(dfCycle, y, dif = FALSE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
m1 <- lm(idx[2:nrow(fit)]~state[1:(nrow(fit)-1)], data = fit)
}
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
#setwd('E:\\workspace_qdf/R/industryData')
ins2cyc <- function(csv_file, eco_cycle){
CSVFILE <- read.csv(csv_file, header = T,
stringsAsFactors = F)
idx <- idxMedian(df = CSVFILE,
time_start = "1993/3/1",
time_end = "2017/12/1")
cycleRobust(dfCycle = eco_cycle,
y = idx)
}
setwd('D:\\R/GenialFlow')
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
setwd('D:\\R/GenialFlow/AshareIndustry')
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
########################################
# idxMedian函数
# 功能：获取行业指标（中位数）
# 输入：行业数据框（行：所有企业 列：开始时间-结束时间 元素：指标的值）
# 输出：行名称为时间点，一列元素为指标中位数的dataframe
########################################
idxMedian <- function(df, time_start, time_end){
num <- df[,4:ncol(df)]
m <- as.matrix(num)
m[which(m==0)] <- NA
num <- as.data.frame(m)
for(i in 1:ncol(num)) num[,i] <- as.numeric(num[,i])
# 提取指标
idx <- c()
for(i in 1:ncol(num)){
mid <- median(num[,i], na.rm = T)
idx <- c(idx, mid)
}
idx <- as.numeric(idx)
rlt <- as.data.frame(idx,
row.names =
as.character(
seq.Date(
from = as.Date(time_start),
to = as.Date(time_end),
by = 'quarter')))
return(rlt)
}
cycleRobust <- function(dfCycle, y, dif = FALSE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
m1 <- lm(idx[2:nrow(fit)]~state[1:(nrow(fit)-1)], data = fit)
}
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
#setwd('E:\\workspace_qdf/R/industryData')
ins2cyc <- function(csv_file, eco_cycle){
CSVFILE <- read.csv(csv_file, header = T,
stringsAsFactors = F)
idx <- idxMedian(df = CSVFILE,
time_start = "1993/3/1",
time_end = "2017/12/1")
cycleRobust(dfCycle = eco_cycle,
y = idx)
}
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
########################################
# idxMedian函数
# 功能：获取行业指标（中位数）
# 输入：行业数据框（行：所有企业 列：开始时间-结束时间 元素：指标的值）
# 输出：行名称为时间点，一列元素为指标中位数的dataframe
########################################
idxMedian <- function(df, time_start, time_end){
num <- df[,4:ncol(df)]
m <- as.matrix(num)
m[which(m==0)] <- NA
num <- as.data.frame(m)
for(i in 1:ncol(num)) num[,i] <- as.numeric(num[,i])
# 提取指标
idx <- c()
for(i in 1:ncol(num)){
mid <- median(num[,i], na.rm = T)
idx <- c(idx, mid)
}
idx <- as.numeric(idx)
rlt <- as.data.frame(idx,
row.names =
as.character(
seq.Date(
from = as.Date(time_start),
to = as.Date(time_end),
by = 'quarter')))
return(rlt)
}
# 试用
idx_house <- idxMedian(df = house,
time_start = "1993/3/1",
time_end = "2017/12/1")
View(idx_house)
is.na(idx_house)
sum(is.na(idx_house))
View(gT1k0)
cycleRobust <- function(dfCycle, y, dif = FALSE){
fit <- cbind(dfCycle, y[row.names(dfCycle),])
colnames(fit)[8] <- 'idx'
fit[,8] <- scale(fit[,8])
if(dif){
m1 <- lm(idx[2:nrow(fit)]~state[1:(nrow(fit)-1)], data = fit)
}
m1 <- lm(idx~state, data = fit)
summary(m1) # 函数没有返回，作用是查看回归结果
}
# 试用
cycleRobust(dfCycle = gT1k0,
y = idx_house)
# 使用PPI代表通胀
pT1k0 <- Cycle(var_eco = scale_dat[,3],# 工业增加值
var_inf = scale_dat[,2], # PPI
lagT = 1,
k = 0)
summary(pT1k0)
summary(pT1k0$state)
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = gT1k0)
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = pT1k0)
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = pT1k0)
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '建筑材料净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '有色金属净利润.csv', eco_cycle = gT1k0)
setwd('D:\\R/GenialFlow/AshareIndustry')
#setwd('E:\\workspace_qdf/R/industryData')
ins2cyc <- function(csv_file, eco_cycle){
CSVFILE <- read.csv(csv_file, header = T,
stringsAsFactors = F)
idx <- idxMedian(df = CSVFILE,
time_start = "1993/3/1",
time_end = "2017/12/1")
cycleRobust(dfCycle = eco_cycle,
y = idx)
}
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
steel <- read.csv('钢铁净利润.csv', header = T,
stringsAsFactors = F)
View(steel)
num <- steel[,4:ncol(steel)]
View(num)
m<-as.matrix(num)
View(m)
m[which(m==0)] <- NA
View(m)
num <- as.data.frame(m)
View(num)
for(i in 1:ncol(num)) num[,i] <- as.numeric(num[,i])
View(num)
# 提取指标
idx <- c()
for(i in 1:ncol(num)){
mid <- median(num[,i], na.rm = T)
idx <- c(idx, mid)
}
idx <- as.numeric(idx)
idx
rlt <- as.data.frame(idx,
row.names =
as.character(
seq.Date(
from = as.Date(time_start),
to = as.Date(time_end),
by = 'quarter')))
########################################
# idxMedian函数
# 功能：获取行业指标（中位数）
# 输入：行业数据框（行：所有企业 列：开始时间-结束时间 元素：指标的值）
# 输出：行名称为时间点，一列元素为指标中位数的dataframe
########################################
idxMedian <- function(df, time_start, time_end){
num <- df[,4:ncol(df)]
m <- as.matrix(num)
m[which(m==0)] <- NA
num <- as.data.frame(m)
for(i in 1:ncol(num)) num[,i] <- as.numeric(num[,i])
# 提取指标
idx <- c()
for(i in 1:ncol(num)){
mid <- median(num[,i], na.rm = T)
idx <- c(idx, mid)
}
idx <- as.numeric(idx)
rlt <- as.data.frame(idx,
row.names =
as.character(
seq.Date(
from = as.Date(time_start),
to = as.Date(time_end),
by = 'quarter')))
return(rlt)
}
idx_steel <- idxMedian(df = steel,
time_start = "1993/3/1",
time_end = "2017/12/1")
View(idx_steel)
View(gT1k0)
setwd('D:\\R/GenialFlow')
# 读取数据+调整
eco <- read.csv('ECO.csv', header = T)
eco <- eco[-1,]
row.names(eco) <- 1:nrow(eco)
eco <- eco[82:(nrow(eco)-4),]
eco[,1] <- paste(eco[,1],'-01',sep='')
eco[,1] <- as.Date(eco[,1])
View(eco)
# 获取时序+指标数值化
tseries <- eco[,1]
idx <- eco[,c(2,3,4,8)]
idx <- as.data.frame(apply(idx, 2, as.numeric))
# 对月度数据取平均得到季度数据
draw <- seq(from=3, to=nrow(idx),by=3)
quaterData <- idx[draw,4]
tseries <- tseries[draw]
monthData <- as.data.frame(cbind(round((idx[draw-2,1]+idx[draw-1,1]+idx[draw,1])/3,4),
round((idx[draw-2,2]+idx[draw-1,2]+idx[draw,2])/3,4),
round((idx[draw-2,3]+idx[draw-1,3]+idx[draw,3])/3,4)))
# 获得数据的初步形式
dat <- as.data.frame(cbind(quaterData,monthData),
stringsAsFactors = F)
row.names(dat) <- tseries
colnames(dat) <- c('GDP平减指数','PPI', '工业增加值','CPI')
# 标准化
scale_dat <- as.data.frame(apply(dat, 2, scale))
View(scale_dat)
########################################
# Cycle函数
# 功能：获取经济周期
# 输入：经济增长指标，通货膨胀指标
# 输出：经济周期（含哑变量）的dataframe
########################################
Cycle <- function(var_eco, var_inf, k, lagT,
ifplot = FALSE){
# 移动平均+描述观察
k = k # 窗宽
zoo1 <- zoo(var_inf, tseries) # 通货膨胀指标
zoo2 <- zoo(var_eco, tseries) # 经济增长指标
if(k==0) dat1 <- cbind(as.data.frame(zoo1),as.vector(zoo2))
else{
rm1 <- rollmean(zoo1,k)
rm2 <- rollmean(zoo2,k)
if(ifplot){  # 是否画图
par(mfrow=c(2,1))
plot(rm1, xlab = '时间', ylab = '通货膨胀')
plot(rm2, xlab = '时间', ylab = '经济增长')
}
dat1 <- cbind(as.data.frame(rm1),as.vector(rm2))
}
colnames(dat1) <- c('通货膨胀','经济增长')
# 经济周期
lagT = lagT # 差分期数
tseries_rm <- row.names(dat1)
tseries_diff <- tseries_rm[(lagT+1):length(tseries_rm)]
eco_up <- tseries_diff[which(diff(dat1[,2], lag = lagT)>=0)] # 经济增长（减缓）期
eco_down <- tseries_diff[which(diff(dat1[,2], lag = lagT)<0)]
inflation <- tseries_diff[which(diff(dat1[,1], lag = lagT)>=0)] # 通货膨胀（通缩）期
deflation <- tseries_diff[which(diff(dat1[,1], lag = lagT)<0)]
overheated <- intersect(eco_up,inflation)    # 过热（美林投资时钟）
stagflation <- intersect(eco_down,inflation) # 滞涨
decline <- intersect(eco_down,deflation)     # 衰退
recovery <- intersect(eco_up,deflation)      # 复苏
state <- c()
# 1过热 2滞涨 3衰退 4复苏
for(i in 1:length(tseries_diff)){
if(tseries_diff[i] %in% overheated) state <- c(state,"过热")
else if(tseries_diff[i] %in% stagflation) state <- c(state,"滞涨")
else if(tseries_diff[i] %in% decline) state <- c(state,"衰退")
else if(tseries_diff[i] %in% recovery) state <- c(state,"复苏")
else state <- c(state, NA)
}
dat2 <- cbind(dat1[(lagT+1):nrow(dat1),],state)
# 分类变量编码
state_dummy <- as.data.frame(class.ind(dat2[,3]))
dat3 <- cbind(dat2[,c(1,2,3)], state_dummy)
return(dat3)
}
# 试用
# 工业增加值->经济增长，GDP平减->通货膨胀
# 具体指标查看scale_dat的列名称
gT1k0 <- Cycle(var_eco = scale_dat[,3], # 工业增加值
var_inf = scale_dat[,1], # GDP平减
lagT = 1,
k = 0)
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = gT1k0)
setwd('D:\\R/GenialFlow/AshareIndustry')
#setwd('E:\\workspace_qdf/R/industryData')
ins2cyc <- function(csv_file, eco_cycle){
CSVFILE <- read.csv(csv_file, header = T,
stringsAsFactors = F)
idx <- idxMedian(df = CSVFILE,
time_start = "1993/3/1",
time_end = "2017/12/1")
cycleRobust(dfCycle = eco_cycle,
y = idx)
}
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '传媒净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '电气设备净利润.csv', eco_cycle = gT1k0)
# 行业—周期模型回归结果查看
ins2cyc(csv_file = '采掘净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '传媒净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '电气设备净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '电子净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '房地产净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '纺织服装净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '非银金融净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '钢铁净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '公用事业净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '国防军工净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '化工净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '机械设备净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '计算机净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '家用电器净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '建筑材料净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '建筑装饰净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '交通运输净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '农林牧渔净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '汽车净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '轻工制造净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '商业贸易净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '食品饮料净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '通信净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '休闲服务净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '医药生物净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '银行净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '有色金属净利润.csv', eco_cycle = gT1k0)
ins2cyc(csv_file = '综合净利润.csv', eco_cycle = gT1k0)
